// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CiliumClusterMeshEnablerInitParameters struct {

	// (Boolean) Enable support for external workloads, such as VMs (Default: false).
	// Enable support for external workloads, such as VMs (Default: `false`).
	EnableExternalWorkloads *bool `json:"enableExternalWorkloads,omitempty" tf:"enable_external_workloads,omitempty"`

	// (Boolean) Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: false).
	// Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
	EnableKvStoreMesh *bool `json:"enableKvStoreMesh,omitempty" tf:"enable_kv_store_mesh,omitempty"`

	// (String) Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: autodetected).
	// Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Boolean) Wait Cluster Mesh status is ok (Default: true).
	// Wait Cluster Mesh status is ok (Default: `true`).
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

type CiliumClusterMeshEnablerObservation struct {

	// (Boolean) Enable support for external workloads, such as VMs (Default: false).
	// Enable support for external workloads, such as VMs (Default: `false`).
	EnableExternalWorkloads *bool `json:"enableExternalWorkloads,omitempty" tf:"enable_external_workloads,omitempty"`

	// (Boolean) Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: false).
	// Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
	EnableKvStoreMesh *bool `json:"enableKvStoreMesh,omitempty" tf:"enable_kv_store_mesh,omitempty"`

	// (String) Cilium ClusterMesh identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: autodetected).
	// Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Boolean) Wait Cluster Mesh status is ok (Default: true).
	// Wait Cluster Mesh status is ok (Default: `true`).
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

type CiliumClusterMeshEnablerParameters struct {

	// (Boolean) Enable support for external workloads, such as VMs (Default: false).
	// Enable support for external workloads, such as VMs (Default: `false`).
	// +kubebuilder:validation:Optional
	EnableExternalWorkloads *bool `json:"enableExternalWorkloads,omitempty" tf:"enable_external_workloads,omitempty"`

	// (Boolean) Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: false).
	// Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
	// +kubebuilder:validation:Optional
	EnableKvStoreMesh *bool `json:"enableKvStoreMesh,omitempty" tf:"enable_kv_store_mesh,omitempty"`

	// (String) Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: autodetected).
	// Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Boolean) Wait Cluster Mesh status is ok (Default: true).
	// Wait Cluster Mesh status is ok (Default: `true`).
	// +kubebuilder:validation:Optional
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

// CiliumClusterMeshEnablerSpec defines the desired state of CiliumClusterMeshEnabler
type CiliumClusterMeshEnablerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CiliumClusterMeshEnablerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CiliumClusterMeshEnablerInitParameters `json:"initProvider,omitempty"`
}

// CiliumClusterMeshEnablerStatus defines the observed state of CiliumClusterMeshEnabler.
type CiliumClusterMeshEnablerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CiliumClusterMeshEnablerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CiliumClusterMeshEnabler is the Schema for the CiliumClusterMeshEnablers API. Cluster Mesh resource. This is equivalent to cilium cli: cilium clustermesh enable and cilium clustermesh disable: It manages the activation of Cluster Mesh on one Kubernetes cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cilium}
type CiliumClusterMeshEnabler struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CiliumClusterMeshEnablerSpec   `json:"spec"`
	Status            CiliumClusterMeshEnablerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CiliumClusterMeshEnablerList contains a list of CiliumClusterMeshEnablers
type CiliumClusterMeshEnablerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CiliumClusterMeshEnabler `json:"items"`
}

// Repository type metadata.
var (
	CiliumClusterMeshEnabler_Kind             = "CiliumClusterMeshEnabler"
	CiliumClusterMeshEnabler_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CiliumClusterMeshEnabler_Kind}.String()
	CiliumClusterMeshEnabler_KindAPIVersion   = CiliumClusterMeshEnabler_Kind + "." + CRDGroupVersion.String()
	CiliumClusterMeshEnabler_GroupVersionKind = CRDGroupVersion.WithKind(CiliumClusterMeshEnabler_Kind)
)

func init() {
	SchemeBuilder.Register(&CiliumClusterMeshEnabler{}, &CiliumClusterMeshEnablerList{})
}
